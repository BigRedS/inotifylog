#! /usr/bin/perl

# inotifylog - Logs inotify events. Pretty single-use, but perhaps there's general
# uses for this if only it existed?
#
# Avi 2018-02

use strict;
use Linux::Inotify2; # liblinux-inotify2-perl
use Getopt::Long;
use Time::HiRes qw/gettimeofday/;
use Cwd;
use Sys::Syslog;

my $help = undef;
my $dump_maskinfo = undef;
my @file_exclude_regex = ();
my $log_to_syslog = undef;

my $file_mask = IN_ALL_EVENTS;
my $dir_mask = IN_ALL_EVENTS;

GetOptions(
	"exclude=s" => \@file_exclude_regex,
	"help" => \$help,
	"mask-help" => \$dump_maskinfo,
	"syslog" => \$log_to_syslog,
) or die ("Error parsing command-line options");

dump_masks() if $dump_maskinfo;
help_and_exit() if $help;

my @paths = @ARGV;

my $inotify = new Linux::Inotify2 or die("Failed to create Linux::Inotify2 object : $!");
my $cwd = getcwd();

openlog("inotifylog", "nodelay,pid", "INFO") if($log_to_syslog);
print_log("Starting; cwd: $cwd");
print_log("Watching: ".join(" ", @paths));
foreach my $path (@paths){
	if(-f $path || -l $path){
		$inotify->watch ($path, $file_mask) or die("Failed to create Inotify watch on file '$path'");
	}elsif(-d $path){
		$inotify->watch ($path, $dir_mask) or die("Failed to create Inotify watch on dir '$path'");
	}else{
		print "WARN: Path '$path' is not a file, link or directory; ignoring\n";
	}
}
print_log("Watches opened");

$SIG{INT} = sub { print_log ("SIGINT caught; exiting") and exit;};

while () {
	my @events = $inotify->read;
	unless (@events > 0) {
		print_log("Linux::Inotify2 read error : $!");
		print_log("Aborting.") and exit 255;
	}

	my $file_events = {};
	foreach my $event (@events){
		my $interesting = 1;
		foreach my $pattern (@file_exclude_regex){
			undef $interesting if $event->fullname =~ m/$pattern/;
		}
		next unless $interesting;

		foreach my $text(mask_to_text($event->mask)){
			$file_events->{$event->fullname}->{$text}++;
		}
	}
	foreach my $file (keys(%{$file_events})){
		output_event($file, $file_events->{$file});
	}
}

sub mask_to_text{
	my $in = shift;
	my @text;
	push(@text, "IN_ACCESS") if $in & IN_ACCESS;
	push(@text, "IN_MODIFY") if $in & IN_MODIFY;
	push(@text, "IN_ATTRIB") if $in & IN_ATTRIB;
	push(@text, "IN_CLOSE_WRITE") if $in & IN_CLOSE_WRITE;
	push(@text, "IN_CLOSE_NOWRITE") if $in & IN_CLOSE_NOWRITE;
	push(@text, "IN_OPEN") if $in & IN_OPEN;
	push(@text, "IN_MOVED_FROM") if $in & IN_MOVED_FROM;
	push(@text, "IN_MOVED_TO") if $in & IN_MOVED_TO;
	push(@text, "IN_CREATE") if $in & IN_CREATE;
	push(@text, "IN_DELETE") if $in & IN_DELETE;
	push(@text, "IN_DELETE_SELF") if $in & IN_DELETE_SELF;
	return(@text);
}

sub print_log{
	my $message = shift;
	my $now = gettimeofday();
	my $localtime = localtime();
	if($log_to_syslog){
		syslog("info", $message);
	}else{
		printf("%-16s [%-24s] [%-8d] %s \n", $now, $localtime, $$, $message);
	}
}

sub output_event{
	my $file = shift;
	my $events = shift;
	my $events_text = join(" | ", sort(keys(%{$events})));
	my $now = gettimeofday();
	my $localtime = localtime();
	if($log_to_syslog){
		syslog("info", sprintf("%s : %s", $file, $events_text))
	}else{
		printf("%-16s [%-24s] [%-8d] %s : %s\n", $now, $localtime, $$, $file, $events_text);
	}
}

sub dump_masks{
print <<'EOF';

This sets IN_ALL_EVENTS on all listeners currently. 


See https://www.kernel.org/pub/linux/kernel/people/rml/inotify/headers/inotify.h

/* the following are legal, implemented events that user-space can watch for */
#define IN_ACCESS                0x00000001        /* File was accessed */
#define IN_MODIFY                0x00000002        /* File was modified */
#define IN_ATTRIB                0x00000004        /* Metadata changed */
#define IN_CLOSE_WRITE           0x00000008        /* Writtable file was closed */
#define IN_CLOSE_NOWRITE         0x00000010        /* Unwrittable file closed */
#define IN_OPEN                  0x00000020        /* File was opened */
#define IN_MOVED_FROM            0x00000040        /* File was moved from X */
#define IN_MOVED_TO              0x00000080        /* File was moved to Y */
#define IN_CREATE                0x00000100        /* Subfile was created */
#define IN_DELETE                0x00000200        /* Subfile was deleted */
#define IN_DELETE_SELF           0x00000400        /* Self was deleted */

/* the following are legal events.  they are sent as needed to any watch */
#define IN_UNMOUNT               0x00002000        /* Backing fs was unmounted */
#define IN_Q_OVERFLOW            0x00004000        /* Event queued overflowed */
#define IN_IGNORED               0x00008000        /* File was ignored */

/* helper events */
#define IN_CLOSE                 (IN_CLOSE_WRITE | IN_CLOSE_NOWRITE) /* close */
#define IN_MOVE                  (IN_MOVED_FROM | IN_MOVED_TO) /* moves */

/* special flags */
#define IN_ISDIR                 0x40000000        /* event occurred against dir */
#define IN_ONESHOT               0x80000000        /* only send event once */

/*
 * All of the events - we build the list by hand so that we can add flags in
 * the future and not break backward compatibility.  Apps will get only the
 * events that they originally wanted.  Be sure to add new events here!
 */
#define IN_ALL_EVENTS	(IN_ACCESS | IN_MODIFY | IN_ATTRIB | IN_CLOSE_WRITE | \
                         IN_CLOSE_NOWRITE | IN_OPEN | IN_MOVED_FROM | \
                         IN_MOVED_TO | IN_DELETE | IN_CREATE | IN_DELETE_SELF)

EOF
exit;
}

sub help_and_exit{
print <<EOF;

inotifylog  - Simple inotify event logger. 

USAGE:

    inotifylog [options] [file1 file2 file3 ...]

Will set up an inotify2 watcher on each of the listed files/dirs, logging
received events.

Options:

  --exclude [file]
      Exclude files whose names match pattern [file] from the output. 

  --help
      Display this help and exit

  --mask-help
     Display a reference to the meanings of the masks in the logs, and exit.

  --syslog
     Log to syslog rather than STDOUT

EOF
exit;

}
